<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\meta_entity\Entity\MetadataDefaults;
use \Drupal\meta_entity\Utility\FormHelper;

/**
 * Implements hook__entity_bundle_field_info().
 */
function meta_entity_entity_bundle_field_info(
  \Drupal\Core\Entity\EntityTypeInterface $entity_type,
  $bundle,
  array $base_field_definitions
) {
  if (!in_array($entity_type->id(), FormHelper::$mappedInstances)) {
    return;
  }

  $config_key = 'instance.' . $entity_type->getBundleEntityType(
    ) . '.' . $bundle;
  $defaults = MetadataDefaults::load($config_key);

  if (!$defaults) {
    return;
  }

  $enabled_type = $defaults->getDefault('enabled');
  if (!$entity_type || $enabled_type == '_none') {
    return;
  }

  $fields['metadata'] = BaseFieldDefinition::create('entity_reference')
    ->setName(new TranslatableMarkup('Metadata'))
    ->setLabel(new TranslatableMarkup('Metadata'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setSetting('target_type', 'metadata')
    ->setSetting('handler_settings', ['target_bundles' => [$enabled_type]])
    ->setDisplayOptions(
      'form',
      [
        'weight' => 30,
        'type' => 'metadata_inline_entity',
      ]
    )
    ->setDisplayConfigurable('form', TRUE);
  return $fields;
}

/**
 * Implements hook_entity_base_field_info().
 */
function meta_entity_entity_base_field_info(
  \Drupal\Core\Entity\EntityTypeInterface $entity_type
) {
  if (!in_array($entity_type->id(), FormHelper::$mappedInstances)) {
    return;
  }

  $fields['metadata'] = BaseFieldDefinition::create('entity_reference')
    ->setName(new TranslatableMarkup('Metadata'))
    ->setLabel(new TranslatableMarkup('Metadata'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);
  return $fields;
}

/**
 * Implements hook_form_alter.
 *
 * Adds sitemap settings to entity types that are supported via plugins.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function meta_entity_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {

  /**
   * @var Drupal\simple_sitemap\Form\FormHelper $f
   */
  $form_helper = \Drupal::service('meta_entity.form_helper');
  if (!$form_helper->processForm($form_state)) {
    return;
  }

  $form['metadata'] = [
    '#type' => 'details',
    '#group' => isset($form['additional_settings']) ? 'additional_settings' : 'advanced',
    '#title' => t('Metadata'),
    '#description' => new TranslatableMarkup(
      'Metadata settings for this entity'
    ),
    '#tree' => TRUE,
  ];

  $form_helper->displayMetadataSettings($form['metadata']);

  $form['actions']['submit']['#submit'][] = 'meta_entity_metadata_settings_submit';
}

function meta_entity_metadata_settings_submit(
  $form,
  FormStateInterface &$form_state
) {
  $form_helper = \Drupal::service('meta_entity.form_helper');
  if (!$form_helper->processForm($form_state)) {
    return;
  }

  $form_helper->processFormSubmit($form_state);
}

/**
 * Implements template_preprocess_html().
 */
function meta_entity_preprocess_html(&$variables) {
  if (!meta_entity_is_current_route_supported()) {
    return;
  }

  $attachments = drupal_static('metadata_attachments');
  if (is_null($attachments)) {
    $attachments = metatag_get_tags_from_route();



  }

//  if (!$attachments) {
//    return;
//  }
//
//  // Load the page title.
//  if (!empty($attachments['#attached']['html_head'])) {
//    foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
//      if (!empty($attachment[1]) && $attachment[1] == 'title') {
//        // It's safe to access the value directly because it was already
//        // processed in MetatagManager::generateElements().
//        $variables['head_title_array'] = [];
//        // Empty head_title to avoid the site name and slogan to be appended to
//        // the meta title.
//        $variables['head_title'] = [];
//        $variables['head_title']['title'] = html_entity_decode($attachment[0]['#attributes']['content'], ENT_QUOTES);
//        // Original:
//        // $variables['head_title_array']['title'] = $attachment[0]['#attributes']['content'];
//        // $variables['head_title'] = implode(' | ', $variables['head_title_array']);
//        break;
//      }
//    }
//  }
}

/**
 * Identify whether the current route is supported by the module.
 *
 * @return bool
 *   TRUE if the current route is supported.
 */
function meta_entity_is_current_route_supported() {
   // If upgrading, we need to wait for database updates to complete.
  /** @var  \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $fieldDefinitions = $entity_field_manager->getBaseFieldDefinitions('node');
  $is_ready = isset($fieldDefinitions['metadata']);
  if (!$is_ready) {
    return FALSE;
  }

  // Ignore admin paths.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return FALSE;
  }

  return TRUE;
}