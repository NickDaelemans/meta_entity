<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\meta_entity\Entity\MetadataDefaults;
use \Drupal\meta_entity\Utility\FormHelper;

/**
 * Implements hook__entity_bundle_field_info().
 */
function meta_entity_entity_bundle_field_info(
  \Drupal\Core\Entity\EntityTypeInterface $entity_type,
  $bundle,
  array $base_field_definitions
) {
  if (!in_array($entity_type->id(), FormHelper::$mappedInstances)) {
    return;
  }

  $config_key = 'instance.' . $entity_type->getBundleEntityType(
    ) . '.' . $bundle;
  $defaults = MetadataDefaults::load($config_key);

  if (!$defaults) {
    return;
  }

  $enabled_type = $defaults->getDefault('enabled');
  if (!$entity_type || $enabled_type == '_none') {
    return;
  }

  $fields['metadata'] = BaseFieldDefinition::create('entity_reference')
    ->setName(new TranslatableMarkup('Metadata'))
    ->setLabel(new TranslatableMarkup('Metadata'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setSetting('target_type', 'metadata')
    ->setSetting('handler_settings', ['target_bundles' => [$enabled_type]])
    ->setDisplayOptions(
      'form',
      [
        'weight' => 30,
        'type' => 'metadata_inline_entity',
      ]
    )
    ->setDisplayConfigurable('form', TRUE);
  return $fields;
}

/**
 * Implements hook_entity_base_field_info().
 */
function meta_entity_entity_base_field_info(
  \Drupal\Core\Entity\EntityTypeInterface $entity_type
) {
  if (!in_array($entity_type->id(), FormHelper::$mappedInstances)) {
    return;
  }

  $fields['metadata'] = BaseFieldDefinition::create('entity_reference')
    ->setName(new TranslatableMarkup('Metadata'))
    ->setLabel(new TranslatableMarkup('Metadata'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);
  return $fields;
}

/**
 * Implements hook_form_alter.
 *
 * Adds sitemap settings to entity types that are supported via plugins.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function meta_entity_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {

  /**
   * @var Drupal\simple_sitemap\Form\FormHelper $f
   */
  $form_helper = \Drupal::service('meta_entity.form_helper');
  if (!$form_helper->processForm($form_state)) {
    return;
  }

  $form['metadata'] = [
    '#type' => 'details',
    '#group' => isset($form['additional_settings']) ? 'additional_settings' : 'advanced',
    '#title' => t('Metadata'),
    '#description' => new TranslatableMarkup(
      'Metadata settings for this entity'
    ),
    '#tree' => TRUE,
  ];

  $form_helper->displayMetadataSettings($form['metadata']);

  $form['actions']['submit']['#submit'][] = 'meta_entity_metadata_settings_submit';
}

function meta_entity_metadata_settings_submit(
  $form,
  FormStateInterface &$form_state
) {
  $form_helper = \Drupal::service('meta_entity.form_helper');
  if (!$form_helper->processForm($form_state)) {
    return;
  }

  $form_helper->processFormSubmit($form_state);
}

/**
 * Implements template_preprocess_html().
 */
function meta_entity_page_attachments(array &$attachments) {
  if (!meta_entity_is_current_route_supported()) {
    return;
  }
  $meta_data_attachments = drupal_static('meta_entity_attachments');
  if (is_null($meta_data_attachments)) {
    $meta_data_attachments = meta_entity_get_tags_from_route();

    // If any metadata were found, append them.
    if (!empty($meta_data_attachments)) {
      if (empty($attachments['#attached'])) {
        $attachments['#attached'] = [];
      }
      if (empty($attachments['#attached']['html_head'])) {
        $attachments['#attached']['html_head'] = [];
      }
      foreach ($meta_data_attachments as $item) {
        $attachments['#attached']['html_head'][] = $item;
      }
    }
  }
}

/**
 * Identify whether the current route is supported by the module.
 *
 * @return bool
 *   TRUE if the current route is supported.
 */
function meta_entity_is_current_route_supported() {
   // If upgrading, we need to wait for database updates to complete.
  /** @var  \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $fieldDefinitions = $entity_field_manager->getBaseFieldDefinitions('node');
  $is_ready = isset($fieldDefinitions['metadata']);
  if (!$is_ready) {
    return FALSE;
  }

  // Ignore admin paths.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Load the meta tags by processing the route parameters.
 *
 * @return mixed
 *   Array of metatags or NULL.
 */
function meta_entity_get_tags_from_route() {
  $manager = \Drupal::service('meta_entity.manager');

  $metadata = [];

  // @todo set site wide defaults.

  // Then, set tag overrides for this particular entity.
  $entity = meta_entity_get_route_entity();

  if (!empty($entity)) {
    foreach ($manager->tagsFromEntity($entity) as $tag => $data) {
      $metadata[$tag] = $data;
    }
  }

  $elements = $manager->generateElements($metadata, $entity);

  Drupal::moduleHandler()->alter('meta_entity_get_tags_from_route', $elements);

  return $elements;
}

/**
 * Returns the entity of the current route.
 *
 * @return EntityInterface
 *   The entity or NULL if this is not an entity route.
 */
function meta_entity_get_route_entity() {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Look for a canonical entity view page, e.g. node/{nid}, taxonomy/term/{tid}, etc.
  $matches = [];
  preg_match('/entity\.(.*)\.canonical/', $route_name, $matches);
  if (!empty($matches[1])) {
    $entity_type = $matches[1];
    return $route_match->getParameter($entity_type);
  }

  return NULL;
}